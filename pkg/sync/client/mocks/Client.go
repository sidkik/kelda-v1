// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	dev "github.com/sidkik/kelda-v1/pkg/proto/dev"
	mock "github.com/stretchr/testify/mock"

	sync "github.com/sidkik/kelda-v1/pkg/sync"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMirrorSnapshot provides a mock function with given fields:
func (_m *Client) GetMirrorSnapshot() (sync.MirrorSnapshot, error) {
	ret := _m.Called()

	var r0 sync.MirrorSnapshot
	if rf, ok := ret.Get(0).(func() sync.MirrorSnapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sync.MirrorSnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mirror provides a mock function with given fields: _a0
func (_m *Client) Mirror(_a0 sync.SourceFile) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(sync.SourceFile) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: _a0
func (_m *Client) Remove(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTargetVersion provides a mock function with given fields: _a0, _a1
func (_m *Client) SetTargetVersion(_a0 dev.SyncConfig, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(dev.SyncConfig, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncComplete provides a mock function with given fields:
func (_m *Client) SyncComplete() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
