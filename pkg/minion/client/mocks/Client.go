// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	config "github.com/sidkik/kelda-v1/pkg/config"
	messages "github.com/sidkik/kelda-v1/pkg/proto/messages"

	minion "github.com/sidkik/kelda-v1/pkg/proto/minion"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWorkspace provides a mock function with given fields: _a0
func (_m *Client) CreateWorkspace(_a0 minion.Workspace) ([]*messages.Message, error) {
	ret := _m.Called(_a0)

	var r0 []*messages.Message
	if rf, ok := ret.Get(0).(func(minion.Workspace) []*messages.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*messages.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(minion.Workspace) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLicense provides a mock function with given fields:
func (_m *Client) GetLicense() (config.License, error) {
	ret := _m.Called()

	var r0 config.License
	if rf, ok := ret.Get(0).(func() config.License); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.License)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpdates provides a mock function with given fields: _a0
func (_m *Client) GetUpdates(_a0 string) ([]*minion.ServiceUpdate, error) {
	ret := _m.Called(_a0)

	var r0 []*minion.ServiceUpdate
	if rf, ok := ret.Get(0).(func(string) []*minion.ServiceUpdate); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*minion.ServiceUpdate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersion provides a mock function with given fields:
func (_m *Client) GetVersion() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformUpdates provides a mock function with given fields: _a0, _a1
func (_m *Client) PerformUpdates(_a0 string, _a1 []*minion.ServiceUpdate) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*minion.ServiceUpdate) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
