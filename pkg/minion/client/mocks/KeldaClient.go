// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	minion "github.com/sidkik/kelda-v1/pkg/proto/minion"

	mock "github.com/stretchr/testify/mock"
)

// KeldaClient is an autogenerated mock type for the KeldaClient type
type KeldaClient struct {
	mock.Mock
}

// CreateWorkspace provides a mock function with given fields: ctx, in, opts
func (_m *KeldaClient) CreateWorkspace(ctx context.Context, in *minion.CreateWorkspaceRequest, opts ...grpc.CallOption) (*minion.CreateWorkspaceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *minion.CreateWorkspaceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *minion.CreateWorkspaceRequest, ...grpc.CallOption) *minion.CreateWorkspaceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minion.CreateWorkspaceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *minion.CreateWorkspaceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLicense provides a mock function with given fields: ctx, in, opts
func (_m *KeldaClient) GetLicense(ctx context.Context, in *minion.GetLicenseRequest, opts ...grpc.CallOption) (*minion.GetLicenseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *minion.GetLicenseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *minion.GetLicenseRequest, ...grpc.CallOption) *minion.GetLicenseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minion.GetLicenseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *minion.GetLicenseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpdates provides a mock function with given fields: ctx, in, opts
func (_m *KeldaClient) GetUpdates(ctx context.Context, in *minion.GetUpdatesRequest, opts ...grpc.CallOption) (*minion.GetUpdatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *minion.GetUpdatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *minion.GetUpdatesRequest, ...grpc.CallOption) *minion.GetUpdatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minion.GetUpdatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *minion.GetUpdatesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersion provides a mock function with given fields: ctx, in, opts
func (_m *KeldaClient) GetVersion(ctx context.Context, in *minion.GetVersionRequest, opts ...grpc.CallOption) (*minion.GetVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *minion.GetVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *minion.GetVersionRequest, ...grpc.CallOption) *minion.GetVersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minion.GetVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *minion.GetVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogEvent provides a mock function with given fields: ctx, in, opts
func (_m *KeldaClient) LogEvent(ctx context.Context, in *minion.LogEventRequest, opts ...grpc.CallOption) (*minion.LogEventResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *minion.LogEventResponse
	if rf, ok := ret.Get(0).(func(context.Context, *minion.LogEventRequest, ...grpc.CallOption) *minion.LogEventResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minion.LogEventResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *minion.LogEventRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerformUpdates provides a mock function with given fields: ctx, in, opts
func (_m *KeldaClient) PerformUpdates(ctx context.Context, in *minion.PerformUpdatesRequest, opts ...grpc.CallOption) (*minion.PerformUpdatesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *minion.PerformUpdatesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *minion.PerformUpdatesRequest, ...grpc.CallOption) *minion.PerformUpdatesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minion.PerformUpdatesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *minion.PerformUpdatesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
