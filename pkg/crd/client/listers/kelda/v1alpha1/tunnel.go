/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/sidkik/kelda-v1/pkg/crd/apis/kelda/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TunnelLister helps list Tunnels.
type TunnelLister interface {
	// List lists all Tunnels in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Tunnel, err error)
	// Tunnels returns an object that can list and get Tunnels.
	Tunnels(namespace string) TunnelNamespaceLister
	TunnelListerExpansion
}

// tunnelLister implements the TunnelLister interface.
type tunnelLister struct {
	indexer cache.Indexer
}

// NewTunnelLister returns a new TunnelLister.
func NewTunnelLister(indexer cache.Indexer) TunnelLister {
	return &tunnelLister{indexer: indexer}
}

// List lists all Tunnels in the indexer.
func (s *tunnelLister) List(selector labels.Selector) (ret []*v1alpha1.Tunnel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Tunnel))
	})
	return ret, err
}

// Tunnels returns an object that can list and get Tunnels.
func (s *tunnelLister) Tunnels(namespace string) TunnelNamespaceLister {
	return tunnelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TunnelNamespaceLister helps list and get Tunnels.
type TunnelNamespaceLister interface {
	// List lists all Tunnels in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Tunnel, err error)
	// Get retrieves the Tunnel from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Tunnel, error)
	TunnelNamespaceListerExpansion
}

// tunnelNamespaceLister implements the TunnelNamespaceLister
// interface.
type tunnelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Tunnels in the indexer for a given namespace.
func (s tunnelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Tunnel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Tunnel))
	})
	return ret, err
}

// Get retrieves the Tunnel from the indexer for a given namespace and name.
func (s tunnelNamespaceLister) Get(name string) (*v1alpha1.Tunnel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tunnel"), name)
	}
	return obj.(*v1alpha1.Tunnel), nil
}
